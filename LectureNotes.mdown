# Table of Contents  
<!-- MarkdownTOC depth=2 autoanchor='true' autolink='true' bracket='round' -->

- [Prior Lectures](#prior-lectures)
- [Encapsulation](#encapsulation)
    - [Principles of Encapsulation](#principles-of-encapsulation)
- [Generics](#generics)
- [Polymorphism and Subclassing / Subinterfacing](#polymorphism-and-subclassing--subinterfacing)
    - [Constructor Chaining](#constructor-chaining)
    - [Overloading](#overloading)
    - [Is-A](#is-a)
    - [Abstract Classes](#abstract-classes)
- [Enumerations](#enumerations)
- [Composition, Aggregation and Delegation](#composition-aggregation-and-delegation)
    - [Composition](#composition)
    - [Aggregation](#aggregation)
    - [Delegation](#delegation)
- [Exception](#exception)
    - [Exception Handling](#exception-handling)
    - [Throwabe Class Hierarchy](#throwabe-class-hierarchy)
    - [Checked Exception](#checked-exception)
    - [Additional Notes on Checked and Unchecked Exceptions](#additional-notes-on-checked-and-unchecked-exceptions)
    - [General Principles](#general-principles)
    - [Odds and Ends](#odds-and-ends)
- [Iterator](#iterator)
    - [Design Situation](#design-situation)
    - [Components of Iterable Pattern](#components-of-iterable-pattern)
- [Factory](#factory)
    - [Singleton](#singleton)
    - [Multiton](#multiton)
    - [Dynamic Subclass Binding](#dynamic-subclass-binding)
- [Notes for Practice Midterm 1](#notes-for-practice-midterm-1)
    - [Inheritance](#inheritance)
    - [Composition and Aggregation](#composition-and-aggregation)

<!-- /MarkdownTOC -->

<a name="prior-lectures"></a>
# Prior Lectures

* All code in Java is organized into classes and interfacs
    - one public class / interface per file (convention) that matches the filename
* Java complier produces byte code
* Java interpreter executes the program
    - need to specify Main Class
    - `public static void main(String[] args`


**Comments** `//` or `/* */`

Primitive Value Types | Reference Types
:---|:---
Integers <br>Real numbers <br>Booleans <br>Character | An object <br> String, Array <br>user object (class or interface) <br>classes themselves 
defined entirely by their value | structures in memory <br>(identified uniquely by address in memory)

Packages | Classes | Methods
:---|:---|:---
package is a collection of classes | collection of functions (for now) | another name for a function / procedure
`package packageName;` | `public class{}` | `signature {}`

**Method Declaration**

Access Modifier | Method Type | Return type | Method name | Parameter List
:---|:---|:---|:---|:---
`public, private, protected` default `package access` | `static` or default | `type or void` | start with letter, `$ or _`, contains those and numbers | `(param)`

**Local Variable Declaration**

* a local variable is valid with the blocks of statements with declaration occurs, _scope_
* parameter names are local variables in scope for the entire method body

**Ternary operator** 
operator that takes three arguments[1]. The arguments and result can be of different types. Many programming languages that use C-like syntax[2] feature a ternary operator, ?:, which defines a conditional expression. Since this operator is often the only existing ternary operator in the language, it is sometimes simply referred to as "the ternary operator".

**Switch**

* work with basic data types and strings
* default and break

**Calling Methods**
calling a method defined in a different class `ClassName.methodName(param)`
calling a class method defined in a differnt package `PackageName.ClassName.methodName(param)`

**Import Directive**
map class names from other packages into current name space `import package.*;`

**Precedence**, mixing integer and doubles `10 / 12 * 12.0`

**String**

* Objects
* string is immutable 
    - can't change once created (not array of characters)
    - if the same string occurs twice, can simply reuse the same object (optimization)
* `String.methods()`
    - `length(), charAt(), equals(), substring(), trim(), indexOf()`
* `String.fields or reference.fields`

**Arrays**

* index starts at 0
* the array structure is of type array, but type of individual elements must be specified
* fixed length and cannot be resized
* initialized to 0 (numeric and char), false (bool) and null(reference)
* literal arrays  
    - variable declaration`Type[] array = { ,..., }`  
    - set an existing variable `newArray = new Type[] {,...,}`  
* cannot change size, but individual elements can change 
* when passed to a method, reference is passed
* can `clone()` 
* multidimensional arrays

``` java
int[][] marray = new int[5][];
for(iint i=0; i<5; i++) {marray[i] = new int[someSize];}

int[][] marray = new int[size1][size2];
```

**Review of non-OO approch**
* all functions are static
* declared locally or passed in as parameters
* static class functions simply act as a library of functions used by our application

**Static Class Fields**
* instance fields are data associated with each instance
* class fields are data associated with the class as a whole (`static`




<a name="encapsulation"></a>
# Encapsulation
<a name="principles-of-encapsulation"></a>
## Principles of Encapsulation

* do not expose the internal state of an object directly
    - make all fields private
    - public methods that retrieve properties (getter and setter)
        + setter validation
* separate exposed behavior from internal behavior
    - define an interface for all exposed behavior
        + like a contract
        + name of interface can be used as a type name, with its value can be set to any object that is an instance of a class that implements the interface
    - mark constructors public 

**Interfaces**

* implementing classes **must** declare these methods as public

<a name="generics"></a>
# Generics
one that is defined with respect to one or more "placeholders" reference types

* when used, the programmer must specify the specific type that replaces the placeholder (class name or interface name)

<a name="polymorphism-and-subclassing--subinterfacing"></a>
# Polymorphism and Subclassing / Subinterfacing
general principle of providing access to an abstraction or method in many forms
<a name="constructor-chaining"></a>
## Constructor Chaining
the first line of code in the constructor must be _this_ keyword as if a function with parameters
<a name="overloading"></a>
## Overloading

* return type may not be the same
* method type must be the same (instance or class method)
* access modifer must be the same
* parameter list must be different

<a name="is-a"></a>
## Is-A

* a class that implements an interface: `A implements B`, then A is a B
* a child class is a parent class
* Multiple interface inheritance is allowed
* Single class inheritance is allowed

Covariance | Contravariance
:---|:---
treating  an instance of a subclass as an instance of parent class | treating a reference typed parent class as an instance of a subclass
can be typed checked at compile time | cannot be type checked at compile time

<a name="abstract-classes"></a>
## Abstract Classes
use "abstract" modifer when declaring parent class
add "abstract" modifier to method signature, and semicolon following signature

<a name="enumerations"></a>
# Enumerations
can be defined within an interface
``` java
    accessType enum enumName { symbol1, symbol2, ...};
```



<a name="composition-aggregation-and-delegation"></a>
# Composition, Aggregation and Delegation
<a name="composition"></a>
## Composition 
dependent individual parts that make up the whole owned solely by the whole

* Encapsulated objects craeted internally (no _setters_ and often no _getters_)
* Encapsulated objects do not make sense outside of te abstraction (not shared)
* Functionality of encapsulated objects only accessible through the composition

<a name="aggregation"></a>
## Aggregation
independent individual parts that make up the whole, but exist on themselves

* Encapsulated objects provided externally
* Encapsulated objects may be independently referenced outside

<a name="delegation"></a>
## Delegation
Claiming an 'is-a' relationship with an interface but relying on another object to actually do the work, ocurrs with either aggregation or composition

<a name="exception"></a>
# Exception
<a name="exception-handling"></a>
## Exception Handling
Unexpected, Disruptive, Possibly Fatal

**Old Strategies**|**New Strategies** 
:---:|:---:
Global Error Code | Throwing 
Special Return Value | Catching

* Promotes good software engineering
* Provides an abstraction for error, and information of error is encapsulated into an objectm
* Improves code organization


**Checked**|**Unchecked**
:---|:---
possibly valid situations that system should  <br> have some way of dealing with  | known as runtime exception
eg. open nonexist files | exceptions that should never happen

### Runtime Exceptions
``` java
throw new RuntimeException(String)
```
### Catching Exceptions
program will not end, can recover / deal with
``` java
try{
    do something
}
catch ( ExceptionType Variable) {
    do something
}
```
### Extending RuntimeExceptions
create runtime exception types, allows to encapsulate custom information about the exception
``` java
public class NewException extends RuntimeException{
    public NewException( someVariable ){
        super( String );
        do something
    }
    @Override
    public String getMessage(){
        // eg.
        return super.getMessage() + " lol you get an error"
    }
}

public yourProgram(){
    if( you get an error ){
    throw new NewException( some variable );
    }
}

public yourProgram(){
    try{
        some buggy codes;
    }
    catch( NewException ne){
        do something
    }
}
```
### Finally Block
will execute no matter what happends
```java
try{  
} catch(){
} finally {
    closeFile(); 
}
```


<a name="throwabe-class-hierarchy"></a>
## Throwabe Class Hierarchy
<pre>
<b>Throwable</b>
â”‚   supercalss for all objects that can be thrown   
â”‚   
â””â”€â”€â”€ <b>Error</b>
â”‚   ("Unchecked")
â”‚   superclass for errors caused by external conditions
â”‚
â””â”€â”€â”€ <b>Exception</b>
    â”‚   superclass for exceptions caused by internal conditions
    â”‚
    â””â”€â”€â”€ <b>RuntimeException</b> 
    â”‚   ("Unchecked")
    â”‚
    â”‚
    â””â”€â”€â”€ ("Checked")
</pre>

<a name="checked-exception"></a>
## Checked Exception
subject to the catch or specify rule
this force the user of the method to explicitly handle the exception or pass the buck to whoever calls it, and enforces good error handling

* a method that could potentially throw a checked exception must declare the possibility as part of its method signature
* a method that calls another method that throws a checked exception must
    - **catch** include the code that catches the exception
    - **specify** declare the possibility of exception as part of its own method signature

``` java
public class NewException extends Exception{
    public NewException(something){
        super("a message")
        // do something
    }
}
public class NewClass{
    // must declare the possibility as part of its method signature
    // force the user to explicitly handle the exception, or pass it to whoever calls it
    public Method(something) throws NewException {
        if( has bugs ){
            throw new NewException(something)
        }
    }
}
```

<a name="additional-notes-on-checked-and-unchecked-exceptions"></a>
## Additional Notes on Checked and Unchecked Exceptions
**Checked**
the exceptions that are checked at compile time, while the unchecked exception are checked at runtime. If some codes within a method throws a chekced exception, then the method **must** either handle the exception or it must specify the exception using the **throws** keyword
``` java
// FileReader() throws a chekced exception
class program_Cant_Compile {
    public static void main(String[] args){
        FileReader file = new FileReader(directory);
        // do something
    }
}

class method1_Declare_Exception {
    public static void main(String[] args) throws theCheckedException {
        FileReader file = new FileReader(directory);
        // do somethng
    }
}

class method2_TryCatch {
    public static void main(String[] args){
        try{
            FileReader file = new Finally(directory);
        } catch (ExceptionType e){
            // do something
        }
    }
}

// This will throw a ArithmeticException an unchecked exception
// all unchecked exceptions are direct subclasses of RuntimeException
class program_Also_Compiles {
    public static void main(Stringp[] args) {
        int x = 0;
        int z = 10/x;
    }
}
```

**Bottom Line**
If a client can reasonably be expected to recover from an exception, make it a chekced exception, if cannot do anythingfrom the exception, make it an unchecked excetion.


<a name="general-principles"></a>
## General Principles
### Be Specific

* Using an existing exception type
* Create own exception type

<pre>
try{
    buggy codes
} catch (<b>lessSpecificException</b> ) {
    throw new <b>moreSpecificException</b>
    // can also add context specific error messgae 
}
</pre>

<a name="catch-late"></a>
##### Catch Late

* Exceptions should rise to the level where application has enough context to deal with them effectively.
* If **Error2** is a subspace of **Error1**, throw **Error2** before **Error1** otherwise Error2 will never be reached.

<a name="throw-early"></a>
### Throw Early

* validate values as early as possible

<a name="odds-and-ends"></a>
## Odds and Ends

* the scope of a variable is limited to the surrounding block (if declare inside a try block)
* sibling catch blocks can reuse error variable name
* a catch block associated with an exception cannot precede a catch associated with a subclass (unreachable code)
* nested try-catch-finally blocks
* interfaces must declare any checked exceptions thrown by any of its implmentations
* finally always runs (even if **return** from within a try or catch block)



<a name="iterator"></a>
# Iterator
<a name="design-situation"></a>
## Design Situation
suppose we have an object that encapsulates some sort of collection
**Not provide access to underlying collection**

* to avoid outside access to the encapsulated files 
* to avoid the fact that there may be no 'end' (generative process)
* to avoid provide a large file all at once

**Not to provide index access to each item**

* to avoid generative collections 
* to avoid restrictions and deterioates encapsulation

**Not to internalize a 'Cursor'**

* to avoid multiple query

### Design Pattern
provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation

* encapsulates details of iten traversal(understand details, manage orders, and manage state to be picked up later)
* Assuming underlying collection is not changed or modified while iterating

<a name="components-of-iterable-pattern"></a>
## Components of Iterable Pattern

* Collection object is iterable 
    - provides a method that returns an object that acts as an iterator, which provide access to elements in turn   
* iterator object provides access to the elements in turn


**Java Collections Framework** defines two generic interfaces for supporting iterable design pattern

* **Iterable<E>** iterator()
* **Iterator<E>**

### Iterator<E>
```java
boolean <b>hasNext</b>
E next // throws a runtime exception if no next item
void remove() // not supported by all, safely remeove last item
```

### for-each
'syntactic sugar' for a particularly common use of iterators
```java

// suppose collection is Iterable<E>

for (E elem: collection){
    // do something
}

// is the same as
Iterator<E> iter = collection.iterator();
while(iter.hasNext()){
    E elem = iter.next();
    // do something
}
```
the same work with arrays (with no index provided)
```java
for(Type variable: Array){
    // do something
}
```

When working with Hashmap / Map
``` java
for (K key: myMap.keySet()){
    // do something    
}

for (V value: myMap.values()){
    // do something
}

for (Map.Entry<K,V> entry: myMap.entrySet()){
    K key = entry.getKey();
    V value = entry.getValye();
    // do something
}

```

<a name="factory"></a>
# Factory
<a name="factory-design-pattern"></a>
### Factory Design Pattern
when direct construction of an object is undesired:
```java
undesired = new NewObject(something);
```

Contexts | Description
:-------- |:--------
**Singleton** |  when there should only be one instance of a particular class in the whole system
**Multiton** | When there should only be one instance of an object associated with some identifying property
**Dynamic Subclass Binding** | When the specific subclass of an object can only be determined at the time that it is created
**Complex Construction** | When the construction of object requires validation <br>When null should be a valid result<br>When an existing object might be provided instead of a new one

<a name="singleton"></a>
## Singleton
When there should only be one instance of a parAcular class in the whole system at any given time.
```java
public class Singleton{
    private fields; // stored in a private static variable
    private Singleton(something){ // make the constructor private
        // do something
    }
    public static SingletonGetter(something){ // public static getter
        // the factory method
        if(this.fields == null){ // none exist yet
            this.fields = new Singleton(something);
        }
        return this.fields;
    }
}
```

<a name="multiton"></a>
## Multiton
Maintains a single instance of the object with regard to some uniquely identifyinf characteristic of object

```java
public class Multiton{
    private fields;
    pricate Multiton(something){
        // do something
    }

    private Multiton static Map<K,V> newMap = new HashMap<K,V>();
    public static Multiton getMultiton(input){
        if(newMap.containsKey(input)){
            // if the property is satisfied, returns the existing one
            return newMap.get(input)
        } else{
            // create a new object if necessary
            Multiton newMultiton = new Multiton(input);
            newMap.put(input);
            return newMultiton;
        }
    }
}

```

#### Notes on Map<K,V> and HashMap<K,V>
Usually implemented using a **map**
```java
Public interface Map<K,V>{}; // not actually valid statement
Public HashMap<K,V> implements Map<K,V>{}; // see above
// basic operations
Map<K,V> newMap = new HashMap<K,V>();
newMap.put(key,value);
V newValue = newMap.get(key);
boolean newBool = newMap.containsKey(key);
newMap.remove(key);

// Map only work with reference types, but Java provides reference type versions of basic value types (int, double, and character)

```

<a name="dynamic-subclass-binding"></a>
## Dynamic Subclass Binding
useful when choice needs to be made between several different subclasses
``` java
public abstract class DSB {
    static boolean state;
    static public void TurnItOff(){state = false;}
    static public void TurnItOn(){state = true;}
    abstract public void usefulMethod();

    static public DSB() { // indirect factory method
        if(state){return new TurnItOn();}
        else{return new TurnItOff();}
    }
}

public SubclassON extends DSB{
    protected SubclassON(){ 
        // do something
    }
    
    public void usefulMethod(){
        // do something
    }
}

public SubclassOFF extends DSB{
    protected SubclassOFF(){ 
        do something
    }
    
    public void usefulMethod(){
        // do something
    }
}
```








<a name="notes-for-practice-midterm-1"></a>
# Notes for Practice Midterm 1

<a name="inheritance"></a>
## Inheritance

* multiple inheritance for interfaces are permitted, but multiple inheritance for classes are not permitted in java.

<a name="composition-and-aggregation"></a>
## Composition and Aggregation

Composition | Aggregation
:---|:---
objects are built internally | objects are built externally and passed into constructor
usually no `getters()` and `setters()` | can have `getters()` and `setters()`


one about Iterator













